# Global parameters shall be defined in the top level values.yaml
# They are kept here for indicating which are supported and their default values.
#global:
#  pullSecret:
#  registry:
#    url: armdocker.rnd.ericsson.se
    ## Secret must be manually created in the namespace.
    # deprecated, it will be removed
#    pullSecret:
#  internalIPFamily:
#  security:
#    tls:
#      enabled: true
#    policyBinding:
#      create: true
#    policyReferenceMap: {}
#  timezone: UTC
#  nodeSelector: {}

log:
  # Supported values ["stdout", "stream"]
  outputs: ["stdout"]
  logshipper:
    level: info

# logLevel, possible values: debug, info, warning, error
logLevel: info

logshipper:
  storageAllocation: "1Gi"
  logplane: "adp-app-logs"
  harvester:
    closeTimeout: "5m"
  logtransformer:
    host: eric-log-transformer

imageCredentials:
  logshipper:
    registry:
      url:
      imagePullPolicy:
    repoPath:
  repoPath:
  pullPolicy: IfNotPresent
# pullSecret:
  registry:
    url: # overrides global registry url
    ## Secret must be manually created in the namespace.
    # deprecated, it will be removed
    #pullSecret:

## updateStrategy for Server
updateStrategy:
  server:
    type: RollingUpdate

## Prometheus server pod termination grace period
##
terminationGracePeriodSeconds:
  server: 300

service:
  endpoints:
    scrapeTargets:
      tls:
        ## If optional both cleartext and TLS targets will be scraped
        ## If required only TLS targets will be scraped
        enforced: required
    reverseproxy:
      tls:
        enforced: required
        # Values: optional or required
        verifyClientCertificate: required
        # to use SIP-TLS CA set to true
        certificateAuthorityBackwardCompatibility: false

server:
  ## Prometheus server container name
  ##
  name: server

  # Defines the serviceAccountName to use
  #serviceAccountName: ""

  ## The URL prefix at which the container can be accessed. Useful in the case the '-web.external-url' includes a slug
  ## so that the various internal URLs are still able to access as they are in the default case.
  ## (Optional)
  prefixURL: ""

  ## External URL which can access alertmanager
  ## Maybe same with Ingress host name
  baseURL: ""

  ## Additional Prometheus server container arguments
  ##
  extraArgs: {}

  ## Additional Prometheus server hostPath mounts
  ##
  extraHostPathMounts: []
    # - name: certs-dir
    #   mountPath: /etc/kubernetes/certs
    #   hostPath: /etc/kubernetes/certs
    #   readOnly: true

  ## Additional Prometheus server secret mounts
  ##
  extraSecretMounts: []
    #- name: etcd-certs
    #  mountPath: /var/run/secrets/etcd/client
    #  subPath: ""
    #  readOnly: true
    #  defaultMode: 420
    #  secretName: etcd-certs

  ## ConfigMap override where fullname is {{.Values.server.configMapOverrideName}}
  ## Defining configMapOverrideName will cause templates/server-configmap.yaml
  ## to NOT generate a ConfigMap resource
  ##
  configMapOverrideName: ""

  ## Node tolerations for server scheduling to nodes with taints
  ##
  tolerations: []
    # - key: "key"
    #   operator: "Equal|Exists"
    #   value: "value"
    #   effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"

  persistentVolume:
    ## If true, Prometheus server will create/use a Persistent Volume Claim
    ## If false, use emptyDir
    ##
    enabled: false

    ## Prometheus server data Persistent Volume access modes
    ## Must match those of existing PV or dynamic provisioner
    ##
    accessModes:
      - ReadWriteOnce

    ## Prometheus server data Persistent Volume annotations
    ##
    annotations: {}

    ## Prometheus server data Persistent Volume mount root path
    ##
    mountPath: /data

    ## Prometheus server data Persistent Volume size
    ##
    size: 8Gi

    ## Prometheus server data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    #storageClass: "-"

    storageConnectivity: networked

    ## Subdirectory of Prometheus server data Persistent Volume to mount
    ## Useful if the volume's root directory is not empty
    ##
    subPath: ""

  ## Annotations to be added to Prometheus server pods
  ##
  podAnnotations: {}
    # iam.amazonaws.com/role: prometheus

  replicaCount: 1

  ## Prometheus server resource requests and limits
  ##

  service:
    annotations: {}
    labels: {}

  ## Prometheus data retention period (i.e 360h)
  ##
  retention: ""

rbac:
  appMonitoring:
    enabled: false
    configFileCreate: true

tolerations:
  eric-pm-server: []

topologySpreadConstraints: []

config:
  recording_rules: {}
  remote_write: []


  ## For remote write over TLS
  certm_tls: []

    ## Name of the endpoint
    #- name:

      ## Same name us sed in the CLI action:
      ## install-certificate-pem name <trustedCertName> pem ...
    #  trustedCertName:

      ## Same names as used in the CLI action:
      ## keystore asymmetric-keys install-asymmetric-key-pkcs12 name <clientKeyName> certificate-name <clientCertName> ...
    #  clientKeyName:
    #  clientCertName:

## Prometheus server ConfigMap entries
##
serverFiles:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      scrape_timeout: 10s
      evaluation_interval: 1m
    rule_files:
      - "/etc/config/recording_rules.yml"
    scrape_configs:
      - job_name: prometheus
        static_configs:
          - targets:
            - localhost:9090
            - localhost:9087

      - job_name: 'kubernetes-nodes'

        # Default to scraping over https. If required, just disable this or change to
        # `http`.
        scheme: https

        # This TLS & bearer token file config is used to connect to the actual scrape
        # endpoints for cluster components. This is separate to discovery auth
        # configuration because discovery & scraping are two separate concerns in
        # Prometheus. The discovery auth config is automatic if Prometheus runs inside
        # the cluster. Otherwise, more config options have to be provided within the
        # <kubernetes_sd_config>.
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          # If your node certificates are self-signed or use a different CA to the
          # master CA, then disable certificate verification below. Note that
          # certificate verification is an integral part of a secure infrastructure
          # so this should only be disabled in a controlled environment. You can
          # disable certificate verification by uncommenting the line below.
          #
          #insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
          - role: node

        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics


      - job_name: 'kubernetes-nodes-cadvisor'

        # Default to scraping over https. If required, just disable this or change to
        # `http`.
        scheme: https

        # This TLS & bearer token file config is used to connect to the actual scrape
        # endpoints for cluster components. This is separate to discovery auth
        # configuration because discovery & scraping are two separate concerns in
        # Prometheus. The discovery auth config is automatic if Prometheus runs inside
        # the cluster. Otherwise, more config options have to be provided within the
        # <kubernetes_sd_config>.
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          # If your node certificates are self-signed or use a different CA to the
          # master CA, then disable certificate verification below. Note that
          # certificate verification is an integral part of a secure infrastructure
          # so this should only be disabled in a controlled environment. You can
          # disable certificate verification by uncommenting the line below.
          #
          #insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
          - role: node

        # This configuration will work only on kubelet 1.7.3+
        # As the scrape endpoints for cAdvisor have changed
        # if you are using older version you need to change the replacement to
        # replacement: /api/v1/nodes/${1}:4194/proxy/metrics
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

      # Scrape config for service endpoints.
      #
      # The relabeling allows the actual service scrape endpoint to be configured
      # via the following annotations:
      #
      # * `prometheus.io/scrape`: Only scrape services that have a value of `true`
      # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
      # to set this to `https` & most likely set the `tls_config` of the scrape config.
      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
      # * `prometheus.io/port`: If the metrics are exposed on a different port to the
      # service then set this appropriately.
      - job_name: 'kubernetes-service-endpoints'

        kubernetes_sd_configs:
          - role: endpoints

        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: job
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
            action: replace
            target_label: __address__
            regex: ((?:\[.+\])|(?:.+))(?::\d+);(\d+)
            replacement: $1:$2
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_name

      # Example scrape config for probing services via the Blackbox Exporter.
      #
      # The relabeling allows the actual service scrape endpoint to be configured
      # via the following annotations:
      #
      # * `prometheus.io/probe`: Only probe services that have a value of `true`
      - job_name: 'kubernetes-services'

        metrics_path: /probe
        params:
          module: [http_2xx]

        kubernetes_sd_configs:
          - role: service

        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
            action: keep
            regex: true
          - source_labels: [__address__]
            target_label: __param_target
          - target_label: __address__
            replacement: blackbox
          - source_labels: [__param_target]
            target_label: instance
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            target_label: kubernetes_name

      # Example scrape config for pods
      #
      # The relabeling allows the actual pod scrape endpoint to be configured via the
      # following annotations:
      #
      # * `prometheus.io/scrape`: Only scrape pods that have a value of `true`
      # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
      # * `prometheus.io/port`: Scrape the pod on the indicated port instead of the default of `9102`.
      - job_name: 'kubernetes-pods'

        kubernetes_sd_configs:
          - role: pod

        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ((?:\[.+\])|(?:.+))(?::\d+);(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

networkPolicy:
  ## Enable creation of NetworkPolicy resources.
  ##
  enabled: false

# Node labels for PM server pod assignment
nodeSelector: {}

labels: {}

podDisruptionBudget:
  minAvailable: 0

podPriority:
  eric-pm-server:
    priorityClassName: ""

## Probes
probes:
  server:
    readinessProbe:
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 30
      failureThreshold: 3
      successThreshold: 1
    livenessProbe:
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 15
      failureThreshold: 3
      successThreshold: 1
  reverseproxy:
    readinessProbe:
      initialDelaySeconds: 5
      periodSeconds: 15
      timeoutSeconds: 15
      failureThreshold: 3
      successThreshold: 1
    livenessProbe:
      initialDelaySeconds: 15
      periodSeconds: 15
      timeoutSeconds: 15
      failureThreshold: 3
      successThreshold: 1
  exporter:
    readinessProbe:
      initialDelaySeconds: 5
      periodSeconds: 15
      timeoutSeconds: 15
      failureThreshold: 3
      successThreshold: 1
    livenessProbe:
      initialDelaySeconds: 15
      periodSeconds: 15
      timeoutSeconds: 15
      failureThreshold: 3
      successThreshold: 1
  logshipper:
    livenessProbe:
      initialDelaySeconds: 1
      periodSeconds: 10
      timeoutSeconds: 10
      failureThreshold: 3
      successThreshold: 1
  configmapreload:
    readinessProbe:
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 30
      failureThreshold: 3
      successThreshold: 1
    livenessProbe:
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 15
      failureThreshold: 3
      successThreshold: 1

resources:
  # Memory usage can increase based on number of pods to scrape, metrics and retentation days.
  # Queries usage for long time metrics can also increase the memory usage.
  eric-pm-server:
    limits:
      cpu: "2"
      memory: "2048Mi"
      ephemeral-storage:
    requests:
      cpu: "250m"
      memory: "512Mi"
      ephemeral-storage:
  eric-pm-configmap-reload:
    limits:
      cpu: "200m"
      memory: "32Mi"
      ephemeral-storage:
    requests:
      cpu: "100m"
      memory: "8Mi"
      ephemeral-storage:
  eric-pm-exporter:
    limits:
      cpu: "200m"
      memory: "32Mi"
      ephemeral-storage:
    requests:
      cpu: "100m"
      memory: "8Mi"
      ephemeral-storage:
  eric-pm-reverseproxy:
    limits:
      cpu: "2"
      memory: "128Mi"
      ephemeral-storage:
    requests:
      cpu: "100m"
      memory: "32Mi"
      ephemeral-storage:
  logshipper:
    limits:
      cpu: "100m"
      memory: "100Mi"
      ephemeral-storage:
    requests:
      cpu: "50m"
      memory: "50Mi"
      ephemeral-storage:

## Security Context for all containers
securityContext: {}
 # runAsUser: 47040
 # runAsGroup: 47040

affinity:
  podAntiAffinity: "hard"

bandwidth:
  maxEgressRate: ""

annotations: {}

appArmorProfile:
  type:
  localhostProfile:
  eric-pm-configmap-reload:
    type:
    localhostProfile:
  eric-pm-exporter:
    type:
    localhostProfile:
  eric-pm-reverseproxy:
    type:
    localhostProfile:
  eric-pm-server:
    type:
    localhostProfile:
  logshipper:
    type:
    localhostProfile:

seccompProfile:
  type:
