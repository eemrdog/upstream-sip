apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "eric-cm-mediator-notifier.name" . }}
  labels: {{ include "eric-cm-mediator.labels" . | nindent 4 }}
  annotations: {{- include "eric-cm-mediator.baseAnnotations" . | nindent 4 }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: {{ template "eric-cm-mediator-notifier.name" . }}
  template:
    metadata:
      labels:
        {{- include "eric-cm-mediator-notifier.pod.labels" . | nindent 8 }}
      annotations:
        {{- include "eric-cm-mediator-notifier.pod.annotations" . | nindent 8 }}
    spec:
      securityContext: {{- include "eric-cm-mediator.seccomp" (dict "pod" "eric-cm-mediator-notifier" "Values" .Values ) | nindent 8 }}
      serviceAccountName: {{ template "eric-cm-mediator.name" . }}-sa
      automountServiceAccountToken: false
      {{- if include "eric-cm-mediator.pullSecret" . }}
      imagePullSecrets:
      - name: {{ template "eric-cm-mediator.pullSecret" . }}
      {{- end }}
      terminationGracePeriodSeconds: {{ index .Values.terminationGracePeriodSeconds "eric-cm-mediator-notifier" }}
{{- if (index .Values "tolerations" "eric-cm-mediator-notifier") }}
      tolerations:
{{ toYaml (index .Values "tolerations" "eric-cm-mediator-notifier") | indent 6 }}
{{- end }}
      initContainers:
      - name: "eric-cm-mediator-init-container"
        image: {{ template "eric-cm-mediator.imagePath" (dict "root" .Values "image" "eric-cm-mediator-init-container" "files" .Files) }}
        imagePullPolicy: {{ template "eric-cm-mediator.pullPolicy" . }}
        env:
        - name: TZ
          value: {{ template "eric-cm-mediator.timezone" . }}
        - name: CM_LOG_LEVEL
          value: {{ .Values.cmm.logLevel | title | quote }}
        - name: CM_LOG_FORMAT
          value: {{ .Values.cmm.logFormat | quote }}
        - name: CM_LOG_SERVICE_TAG
          value: {{ .Chart.Name | quote }}
        - name: CM_LOG_OUTPUT
          value: {{ template "eric-cm-mediator.logOutput" . }}
{{- if (has "stream" .Values.cmm.logOutput) }}
        - name: CM_LOG_SERVER
          value: {{ template "eric-cm-mediator.logtransformer" . }}
        - name: WAIT_FOR_LOG_SERVER
          value: "true"
{{- end }}
        - name: ENDPOINT
{{- if .Values.exilis.cm.enabled }}
{{- if .Release.IsInstall }}
          value: {{ template "eric-cm-mediator.exilis.cmbackend" . }}
{{- else }}
          value: {{ .Values.exilis.cm.storage.hostname }}:{{ .Values.exilis.cm.storage.port }}
{{- end }}
{{- else }}
          value: {{ .Values.backend.hostname }}:{{ .Values.backend.port }}
{{- end }}
{{- if not (.Values.exilis.cm.enabled) }}
        - name: INIT_DB_ENDPOINT
          value: "true"
{{- if not (eq (include "eric-cm-mediator.tls" .) "true") }}
        - name: CM_BACKEND_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ required "credentials.kubernetesSecretName must be set if TLS is disabled." .Values.credentials.kubernetesSecretName | quote }}
              key: {{ .Values.credentials.keyForUserId | quote }}
        - name: CM_BACKEND_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ required "credentials.kubernetesSecretName must be set if TLS is disabled." .Values.credentials.kubernetesSecretName | quote }}
              key: {{ .Values.credentials.keyForUserPw | quote }}
{{- else }}
        - name: CM_BACKEND_USERNAME
          value: {{ required "backend.dbuser must be set if TLS is enabled." .Values.backend.dbuser | quote }}
        - name: CM_SERVER_USE_TLS
          value: "true"
{{- end }}
        - name: CM_BACKEND_SERVER
          value: {{ template "eric-cm-mediator.dbbackend" . }}
{{- end }}
        securityContext: {{- include "eric-cm-mediator.containerSecurityContext" . | nindent 10 }}
{{ if index .Values "resources" "eric-cm-mediator-init-container" }}
        resources:
{{ toYaml (index .Values "resources" "eric-cm-mediator-init-container") | indent 10 }}
{{ end }}
        volumeMounts:
          - name: tmp-volume
            mountPath: /tmp
{{- if eq (include "eric-cm-mediator.tls" .) "true" }}
{{- if (not .Values.exilis.cm.enabled) }}
          - name: tls-document-db-admin-cert-volumemount
            mountPath: /etc/sip-tls-document-db-admin
            readOnly: true
{{- end }}
{{- if or (not .Values.exilis.cm.enabled) (has "stream" .Values.cmm.logOutput) }}
          - name: tls-trusted-ca-cert-volumemount
            mountPath: /etc/sip-tls-ca
            readOnly: true
{{- end }}
{{- if (has "stream" .Values.cmm.logOutput) }}
          - name: tls-log-transformer-client-cert-volumemount
            mountPath: /etc/sip-tls-logtransformer-client
            readOnly: true
{{- end }}
{{- end }}
      containers:
      - name: "eric-cm-mediator"
        env:
{{- if not (eq (include "eric-cm-mediator.tls" .) "true") }}
        - name: CM_BACKEND_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ required "credentials.kubernetesSecretName must be set if TLS is disabled." .Values.credentials.kubernetesSecretName | quote }}
              key: {{ .Values.credentials.keyForUserId | quote }}
        - name: CM_BACKEND_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ required "credentials.kubernetesSecretName must be set if TLS is disabled." .Values.credentials.kubernetesSecretName | quote }}
              key: {{ .Values.credentials.keyForUserPw | quote }}
{{- else }}
        - name: CM_BACKEND_USERNAME
          value: {{ required "backend.dbuser must be set if TLS is enabled." .Values.backend.dbuser | quote }}
{{- end }}
        - name: TZ
          value: {{ template "eric-cm-mediator.timezone" . }}
        - name: CM_POD_ROLE
          value: "cmnotifier"
        - name: CM_SUBCLEANER_INTERVAL
          value: {{ .Values.cmm.subCleanerInterval | quote }}
{{- if .Values.cmm.debug }}
        - name: DEBUG
          value: {{ .Values.cmm.debug | quote }}
{{- end }}
        - name: CM_CONFIGURATION_RELOAD_TIMER
          value: {{ .Values.cmm.configReloadTimer | quote }}
        - name: CM_LOG_LEVEL
          value: {{ .Values.cmm.logLevel | title | quote }}
        - name: CM_LOG_FORMAT
          value: {{ .Values.cmm.logFormat | quote }}
        - name: CM_LOG_MAX_MSG_SIZE
          value: {{ .Values.cmm.logMaxMsgSize | mul 1024 | quote }}
        - name: CM_LOG_OUTPUT
          value: {{ template "eric-cm-mediator.logOutput" . }}
{{- if (has "stream" .Values.cmm.logOutput) }}
        - name: CM_LOG_SERVER
          value: {{ template "eric-cm-mediator.logtransformer" . }}
{{- end }}
{{- if .Values.kafka.hostname }}
        - name: CM_KAFKA_LOG_LEVEL
          value: {{ .Values.cmm.kafkaLogLevel | title | quote }}
        - name: KAFKA_SERVERS
          value: {{ template "eric-cm-mediator.kafka" . }}
        - name: CM_KAFKA_PRODUCER_CONFIG
          value: {{ .Values.cmm.kafkaProducerConfig | quote }}
{{- end }}
{{- if .Values.redis.hostname }}
        - name: CM_REDIS_LOG_LEVEL
          value: {{ .Values.cmm.redisLogLevel | title | quote }}
        - name: REDIS_SERVERS
          value: {{ template "eric-cm-mediator.redis" . }}
        - name: CM_REDIS_CONFIG
          value: {{ .Values.cmm.redisConfig | quote }}
{{- if .Values.redis.acl.enabled }}
        - name: REDIS_ACL_USER
          value: {{ .Values.redis.acl.user }}
{{- end }}
{{- end }}
        - name: CM_GUNICORN_LOG_LEVEL
          value: {{ .Values.cmm.gunicornLogLevel | title | quote }}
        - name: CM_GUNICORN_ACCESS_LOG_LEVEL
          value: {{ .Values.cmm.gunicornAccessLogLevel | title | quote }}
        - name: CM_ACCESS_LOGGING
          value: {{ .Values.cmm.accessLogging | quote }}
{{- if .Values.exilis.cm.enabled }}
        - name: EXILIS_CM_BACKEND_SERVER
          value: {{ template "eric-cm-mediator.exilis.cmbackend" . }}
{{- end }}
        - name: CM_BACKEND_SERVER
          value: {{ template "eric-cm-mediator.dbbackend" . }}
        - name: CM_METRICS_ENABLED
          value: "true"
{{- if eq (include "eric-cm-mediator.tls" .) "true" }}
{{- if (eq .Values.service.endpoints.restapi.tls.enforced "required") }}
        - name: CM_SERVER_USE_TLS_ONLY
          value: "true"
{{- end }}
        - name: CM_SERVER_USE_TLS
          value: "true"
        - name: CM_TLS_ENABLE_CLIENT_CERT
          value: "true"
{{- end }}
        image: {{ template "eric-cm-mediator.imagePath" (dict "root" .Values "image" "eric-cm-mediator" "files" .Files) }}
        imagePullPolicy: {{ template "eric-cm-mediator.pullPolicy" . }}
        ports:
        - containerPort: {{ template "eric-cm-mediator.metrics-port" . }}
{{- if eq (include "eric-cm-mediator.tls" .) "true" }}
          name: https-pm-tls
{{- else }}
          name: http-pm
{{- end }}
        volumeMounts:
          - name: service-volume
            mountPath: /service
          - name: tmp-volume
            mountPath: /tmp
{{- if and .Values.redis.hostname .Values.redis.acl.enabled }}
          - name: redis-acl-volumemount
            mountPath: /etc/redis-acl
            readOnly: true
{{- end }}
{{- if eq (include "eric-cm-mediator.tls" .) "true" }}
          - name: tls-server-cert-volumemount
            mountPath: /etc/sip-tls
            readOnly: true
          - name: tls-trusted-ca-cert-volumemount
            mountPath: /etc/sip-tls-ca
            readOnly: true
          - name: tls-client-ca-cert-volumemount
            mountPath: /etc/sip-tls-client-ca
            readOnly: true
          - name: tls-client-cert-volumemount
            mountPath: /etc/sip-tls-client
            readOnly: true
          - name: tls-document-db-client-cert-volumemount
            mountPath: /etc/sip-tls-document-db-client
            readOnly: true
          - name: tls-pm-client-ca-cert-volumemount
            mountPath: /etc/sip-tls-pm-client-ca
            readOnly: true
{{- if .Values.exilis.cm.enabled }}
          - name: tls-cm-backend-client-cert-volumemount
            mountPath: /etc/sip-tls-cm-backend-client
            readOnly: true
{{- end }}
{{- if .Values.kafka.hostname }}
          - name: tls-message-bus-client-cert-volumemount
            mountPath: /etc/sip-tls-message-bus-client
            readOnly: true
{{- end }}
{{- if .Values.redis.hostname }}
          - name: tls-kvdb-rd-client-cert-volumemount
            mountPath: /etc/sip-tls-kvdb-rd-client
            readOnly: true
{{- end }}
{{- if (has "stream" .Values.cmm.logOutput) }}
          - name: tls-log-transformer-client-cert-volumemount
            mountPath: /etc/sip-tls-logtransformer-client
            readOnly: true
{{- end }}
{{- end }}
        securityContext: {{- include "eric-cm-mediator.containerSecurityContext" . | nindent 10 }}
        livenessProbe:
          exec:
            command:
            - /usr/bin/cmm_notifier_probe.sh
{{ toYaml (index .Values "probes" "eric-cm-mediator-notifier" "livenessProbe") | indent 10 }}
          successThreshold: 1
{{ if index .Values "resources" "eric-cm-mediator-notifier" }}
        resources:
{{ toYaml (index .Values "resources" "eric-cm-mediator-notifier") | indent 10 }}
{{ end }}
      {{- if include "eric-cm-mediator.nodeSelector.general" . }}
      nodeSelector:
        {{ template "eric-cm-mediator.nodeSelector.general" . }}
      {{- else if include "eric-cm-mediator-notifier.nodeSelector" . }}
      nodeSelector:
        {{ template "eric-cm-mediator-notifier.nodeSelector" . }}
      {{- end }}
      affinity:
        podAntiAffinity: {{ include "eric-cm-mediator.podAntiAffinity" . | nindent 10 }}
{{- if index .Values.podPriority "eric-cm-mediator-notifier" "priorityClassName" }}
      priorityClassName: {{ index .Values.podPriority "eric-cm-mediator-notifier" "priorityClassName" | quote }}
{{- end }}
      volumes:
      - name: service-volume
        emptyDir: {}
      - name: tmp-volume
        emptyDir:
          medium: "Memory"
{{- if and .Values.redis.hostname .Values.redis.acl.enabled }}
      - name: redis-acl-volumemount
        secret:
          secretName: {{ .Values.redis.hostname }}-secret-{{ .Values.redis.acl.user }}
{{- end }}
{{- if eq (include "eric-cm-mediator.tls" .) "true" }}
      - name: tls-server-cert-volumemount
        secret:
          secretName: {{ template "eric-cm-mediator.name" . }}-tls-server-secret
      - name: tls-trusted-ca-cert-volumemount
        secret:
          secretName: eric-sec-sip-tls-trusted-root-cert
      - name: tls-client-ca-cert-volumemount
        secret:
          secretName: {{ template "eric-cm-mediator.name" . }}-tls-client-ca-secret
      - name: tls-client-cert-volumemount
        secret:
          secretName: {{ template "eric-cm-mediator.name" . }}-tls-client-secret
      - name: tls-document-db-client-cert-volumemount
        secret:
          secretName: {{ template "eric-cm-mediator.name" . }}-document-db-tls-client-secret
      - name: tls-document-db-admin-cert-volumemount
        secret:
          secretName: {{ template "eric-cm-mediator.name" . }}-document-db-tls-admin-secret
      - name: tls-pm-client-ca-cert-volumemount
        secret:
          secretName: {{ .Values.pmserver.hostname }}-ca
          optional: true
{{- if .Values.exilis.cm.enabled }}
      - name: tls-cm-backend-client-cert-volumemount
        secret:
          secretName: {{ template "eric-cm-mediator.name" . }}-cm-backend-tls-client-secret
{{- end }}
{{- if .Values.kafka.hostname }}
      - name: tls-message-bus-client-cert-volumemount
        secret:
          secretName: {{ template "eric-cm-mediator.name" . }}-message-bus-tls-client-secret
{{- end }}
{{- if .Values.redis.hostname }}
      - name: tls-kvdb-rd-client-cert-volumemount
        secret:
          secretName: {{ template "eric-cm-mediator.name" . }}-kvdb-rd-tls-client-secret
{{- end }}
{{- if (has "stream" .Values.cmm.logOutput) }}
      - name: tls-log-transformer-client-cert-volumemount
        secret:
          secretName: {{ template "eric-cm-mediator.name" . }}-log-transformer-tls-client-secret
{{- end }}
{{- end }}
