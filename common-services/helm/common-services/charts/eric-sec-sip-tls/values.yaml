## Default values for eric-sec-sip-tls.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

#global:
#  annotations: {}
#  labels: {}
#  security:
#    policyBinding:
#      create: false
#    policyReferenceMap:
#      default-restricted-security-policy: default-restricted-security-policy
  ## pullSecret, the secret resource name used for authenticating towards docker registry where images are pulled
  #pullSecret:
  ## internalIPFamily, IP version can be chosen in dual stack cluster
  #internalIPFamily:
  #registry:
    ## Docker registry url
    #url: 451278531435.dkr.ecr.us-east-1.amazonaws.com
    ## imagePullPolicy, desired policy under which condition the images are pulled from registry
    #imagePullPolicy: IfNotPresent
  ## nodeSelector, to influence the Pod placement decision and instruct Kubernetes to schedule a Pod on certain node(s)
  #nodeSelector: {}
  ## fsGroup, to set up the proper gid value for accessing mounted persistent data (default is 10000 if not defined)
  #fsGroup:
    ## 'manual' to enforce a specific value (this has the highest precedence)
    #manual: 15000
    ## 'namespace' to use the value defined for the namespace set by the cluster admin (second highest precedence)
    #namespace: true
  #timezone: UTC
#  networkPolicy:
#    enabled: false

imageCredentials:
  ## pullSecret, the secret resource name used for authenticating towards docker registry where images are pulled
  ## overrides the global value when set
  pullSecret:
  sip:
    repoPath: # see default in eric-product-info.yaml
    registry:
      ## url, service specific Docker registry url, overrides the global value when set
      url:
      ## imagePullPolicy, service specific policy, overrides the global value when set
      imagePullPolicy:
  init:
    repoPath: # see default in eric-product-info.yaml
    registry:
      url:
      imagePullPolicy:
  supervisor:
    repoPath: # see default in eric-product-info.yaml
    registry:
      url:
      imagePullPolicy:
  ## settings for logshipper sidecar
  logshipper:
    repoPath: # see default in eric-product-info.yaml
    registry:
      url:
      imagePullPolicy:

updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 50%
    maxSurge: 25%

images:
  sip:
    name: eric-sec-sip-tls-main
    tag: 3.0.0-46
  init:
    name: eric-sec-sip-tls-init
    tag: 3.0.0-46
  supervisor:
    name: eric-sec-sip-tls-supervisor
    tag: 3.0.0-46
  logshipper:
    name: eric-log-shipper
    tag: 7.3.0-23

## replicas, number of SIP-TLS pod instances. Only one of them is processing and watching CRs.
replicaCount: 2

affinity:
  podAntiAffinity: "soft"

## podDisruptionBudget, enables workload to be able to properly deal with voluntary disruptions
## applicable when replicas greater than 1, parameters are mutually exclusive
podDisruptionBudget:
  minAvailable: 1
  maxUnavailable:

resources:
  sip-tls:
    requests:
      memory: "200Mi"
      cpu: "100m"
      ephemeral-storage:
    limits:
      memory: "400Mi"
      cpu: "3000m"
      ephemeral-storage:
  sip-tls-supervisor:
    requests:
      memory: "200Mi"
      cpu: "100m"
      ephemeral-storage:
    limits:
      memory: "400Mi"
      cpu: "3000m"
      ephemeral-storage:
  sip-tls-init:
    requests:
      memory: "200Mi"
      cpu: "100m"
      ephemeral-storage:
    limits:
      memory: "400Mi"
      cpu: "3000m"
      ephemeral-storage:
  logshipper:
    requests:
      memory: "80Mi"
      cpu: "80m"
      ephemeral-storage:
    limits:
      memory: "100Mi"
      cpu: "100m"
      ephemeral-storage:


## Probes configuration
probes:
  sip-tls:
    livenessProbe:
      initialDelaySeconds: 0
      timeoutSeconds: 5
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 3
    readinessProbe:
      initialDelaySeconds: 0
      timeoutSeconds: 5
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 3
    startupProbe:
      initialDelaySeconds: 0
      timeoutSeconds: 5
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 3
  sip-tls-supervisor:
    livenessProbe:
      initialDelaySeconds: 180
      timeoutSeconds: 5
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 5
    readinessProbe:
      initialDelaySeconds: 0
      timeoutSeconds: 5
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 3
    startupProbe:
      initialDelaySeconds: 0
      timeoutSeconds: 5
      periodSeconds: 10
      successThreshold: 1
      failureThreshold: 3
  logshipper:
    livenessProbe:
      initialDelaySeconds: 1
      timeoutSeconds: 10
      periodSeconds: 10
      failureThreshold: 3

## Tolerations to influence scheduling decisions made by Kubernetes scheduler
## If SIP-TLS is deployed as a single replica, it is recommended to use the following tolerations
tolerations: []
  #- key: node.kubernetes.io/not-ready
  #  operator: Exists
  #  effect: NoExecute
  #  tolerationSeconds: 0
  #- key: node.kubernetes.io/unreachable
  #  operator: Exists
  #  effect: NoExecute
  #  tolerationSeconds: 0

serverCertificate:
  ## The time in seconds that certificates are valid
  validLifetimeSeconds: "604800"

  ## The certificate renewal threshold as a ratio relative to validLifetimeSeconds
  ## The renewal time is calculated by multiplying validLifetimeSeconds by renewalThresholdRatio
  ## E.g. with default values the certificate would be renewed after 544320s (604800s*0.9) at the latest
  renewalThresholdRatio: 0.9

clientCertificate:
  ## The time in seconds that certificates are valid
  validLifetimeSeconds: "604800"

  ## The certificate renewal threshold as a ratio relative to validLifetimeSeconds
  ## The renewal time is calculated by multiplying validLifetimeSeconds by renewalThresholdRatio
  ## E.g. with default values the certificate would be renewed after 544320s (604800s*0.9) at the latest
  renewalThresholdRatio: 0.9

internalCertificate:
  ## The time in seconds that certificates are valid
  validLifetimeSeconds: "604800"

  ## The certificate renewal threshold as a ratio relative to validLifetimeSeconds
  ## The renewal time is calculated by multiplying validLifetimeSeconds by renewalThresholdRatio
  ## E.g. with default values the certificate would be renewed after 544320s (604800s*0.9) at the latest
  renewalThresholdRatio: 0.9

  ## The Kubernetes cluster domain that gets populated to Subject Alternative Name
  clusterDomain: cluster.local

## Possible values: debug, info, error
logLevel: info

service:
  endpoints:
    metrics:
      tls:
        # - If 'optional': HTTP only
        # - If 'required': HTTPS only
        # For metrics we won't have both HTTP and HTTPS at same time
        # options: 'optional' or 'required'
        enforced: required
        verifyClientCertificate: optional

## If false, metrics will not be scraped
metrics:
  enabled: false

pm:
  serviceName: eric-pm-server

keyManagement:
  serviceAccountNameForCredentials: eric-sec-key-management-admin
  hostname: eric-sec-key-management
  port: 8200

## Key Management db back end details needed for the bootstrap
etcd:
  hostname: eric-data-distributed-coordinator-ed
  port: 2379
  peerCn: eric-data-distributed-coordinator-ed-peer

## Message bus for fault indication
kafka:
  hostname: eric-data-message-bus-kf-client
  ## Use 9093 when enabling tls. Use 9092 when disabling tls
  port: 9092
  tls:
    enabled: false
    ## Hostname verification not possible in MB KF 1.9.0
    verifyHostname: false

## Alarm Handler for fault indication
alarmHandler:
  useAPIDefinition: false
  hostname: eric-fh-alarm-handler
  ## Use 6006 when enabling tls. Use 6005 when disabling tls
  port: 6006
  tls:
    enabled: true

## Log configuration
log:
  # Supported values ["stdout", "stream"]
  outputs: ["stdout"]
  logshipper:
    level: "info"

## Log Shipper (as a sidecar) configuration
## Used only if log.outputs has "stream"
## Log Shipper also requires Log Transformer
logshipper:
  disableProbes: true
  storagePath: "/logs"
  storageAllocation: "500Mi"
  harvester:
    closeTimeout: "5m"
    logData:
    - subPaths:
      - "/sip-tls-init.log*"
      logplane: "adp-app-logs"
      multiline:
        pattern: '^[[:space:]]'
        negate: false
        match: after
    - subPaths:
      - "/sip-tls.log*"
      logplane: "adp-app-logs"
      multiline:
        pattern: '^[[:space:]]'
        negate: false
        match: after
    - subPaths:
      - "/sip-tls-supervisor.log*"
      logplane: "adp-app-logs"
      multiline:
        pattern: '^[[:space:]]'
        negate: false
        match: after
  logtransformer:
    host: eric-log-transformer

## Additional labels to be attached by an Application Design Engineer or an Application Deployment Engineer
labels: {}

## Additional annotations to be attached by an Application Design Engineer or an Application Deployment Engineer
annotations: {}

## Additional nodeSelector values to be attached by an Application Design Engineer or an Application Deployment Engineer
nodeSelector: {}

## Additional Pod Topology Spread Constraints values to be attached by an Application Design Engineer or an Application Deployment Engineer
topologySpreadConstraints: []

## terminationGracePeriodSeconds, time duration after process termination before they are forcibly killed
terminationGracePeriodSeconds: 5

alarmInstanceModel:
  compliantWithFHDRs:
    enabled: false

# Pod priority configuration for deployment
podPriority:
  priorityClassName: "" # No priority set

networkPolicy:
  known:
    enabled: false

bandwidth:
  maxEgressRate: 10M
