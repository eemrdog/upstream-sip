#global:
  ## pullSecret, the secret resource name used for authenticating towards docker registry where images are pulled
  #pullSecret:
  ## internalIPFamily, IP version can be chosen in dual stack cluster
  #internalIPFamily:
  #registry:
    ## Docker registry url
    #url: 451278531435.dkr.ecr.us-east-1.amazonaws.com
    ## imagePullPolicy, desired policy under which condition the images are pulled from registry
    #imagePullPolicy: IfNotPresent
    ## global.registry.pullSecret, deprecated and removed in favor of global.pullSecret
    #pullSecret:
  ## fsGroup for demo purposes, never in production environment
  #fsGroup:
    ## Define either 'manual' or 'namespace', or do not define fsGroup at all (fallback is 10000)
    ## manual, enforce a specific value, for example 15000
    #manual: 15000
    ## namespace, use the value defined for the namespace (that value is set by a cluster admin)
    #namespace: true
  #security:
    ## policyBinding, condition to create role binding to cluster role for security policy
    #policyBinding:
      #create:
    ## policyReferenceMap, PSP/SCC policies (key) references to cluster roles (value)
    #policyReferenceMap:

imageCredentials:
  repoPath: proj-common-assets-cd-released/security
  ## pullSecret, the secret resource name used for authenticating towards docker registry where images are pulled
  ## overrides the global setting when set
  pullSecret: null
  ## imageCredentials.pullPolicy, deprecated and removed in favor of imageCredentials.registry.imagePullPolicy
  pullPolicy: null
  registry:
    ## url, service specific Docker registry url, overrides the global setting when set
    url: null
    ## pullSecret, is deprecated and removed in favor of imageCredentials.pullSecret
    pullSecret: null
    ## imagePullPolicy, service specific policy, overrides the global setting when set
    imagePullPolicy: null
  ## Logshipper related configuration
  logshipper:
    repoPath: proj-adp-log-released
    registry:
      url:
      imagePullPolicy:

updateStrategy:
  ## If the chosen pvc backend does not support ReadWriteOnce access, use 'Recreate'
  type: RollingUpdate

## replicas, number of KMS instances. Only one of them is active. Max value is 2.
## If set to 2 requires persistence.type=etcd
replicas: 1

## podDisruptionBudget, enables workload to be able to properly deal with voluntary disruptions
## applicable when replicas is 2, parameters are mutually exclusive, one of them is empty and other has value 1
podDisruptionBudget:
  minAvailable: 1
  maxUnavailable:

persistence:
  type: etcd
  etcd:
    ## serviceName, database service name
    serviceName: eric-data-distributed-coordinator-ed
    ## servicePort, database service port to connect
    servicePort: 2379
    tls:
      ## Toggle TLS secured communication for DCED
      ## Requires Service Identity Provider TLS service
      enabled: true
      ## trustedCaSecret, secret name holding trusted CA root certificate
      trustedCaSecret: eric-sec-sip-tls-trusted-root-cert

  ## Usage of the pvc is not for production use, only for demo/test usage
  pvc:
    size: 100Mi
    storageClassName: null
    ## keep the pvc after helm deletion or not
    keep: true

# Deprecated in favor of eric-product-info.yaml file
images:
  ## The container that runs the backed up KMS instance
  vault:
    name: eric-sec-key-management-main
    tag: 2.24.0-10

  ## The container that runs the non-backed up KMS instance
  shelter:
    name: eric-sec-key-management-main
    tag: 2.24.0-10

  ## Init container that intializes and configures KMS
  unsealer:
    name: eric-sec-key-management-configurator
    tag: 2.24.0-10

  ## Init container that configures access rights towards DCED
  ca:
    name: eric-sec-key-management-dced-configurator
    tag: 2.24.0-10

  ## Log Shipper container
  logshipper:
    name: eric-log-shipper
    tag: 7.3.0-23

## unsealAutomatically, whether KMS should be unsealed automatically when becoming sealed.
## If this is set to false, then another mechanism to handle unseal
## process must be implemented.
unsealAutomatically: true

## deployClusterRoleBinding, condition if the cluster role binding resource
## is created during the deployment. This binding allows usage of the
## Kubernetes Authentication method. If it is not created during deployment,
## it must be created before deployment separately.
deployClusterRoleBinding: true

## shelter, when set to true, enables consistent backups
## when DCED is used as database backend for KMS
shelter:
  enabled: false

## metrics will not be scraped if set to false
## metrics-exporter container will not be created
metrics:
  enabled: false

resources:
  ca:
    requests:
      memory: "400Mi"
      cpu: "100m"
      ephemeral-storage:
    limits:
      memory: "400Mi"
      cpu: "100m"
      ephemeral-storage:
  unsealer:
    requests:
      memory: "400Mi"
      cpu: "100m"
      ephemeral-storage:
    limits:
      memory: "400Mi"
      cpu: "100m"
      ephemeral-storage:
  shelter:
    requests:
      memory: "400Mi"
      cpu: "100m"
      ephemeral-storage:
    limits:
      memory: "1200Mi"
      cpu: "300m"
      ephemeral-storage:
  vault:
    requests:
      memory: "400Mi"
      cpu: "100m"
      ephemeral-storage:
    limits:
      memory: "1200Mi"
      cpu: "300m"
      ephemeral-storage:
  logshipper:
    requests:
      memory: "50Mi"
      cpu: "20m"
      ephemeral-storage:
    limits:
      memory: "100Mi"
      cpu: "50m"
      ephemeral-storage:
  metrics:
    requests:
      memory: "10Mi"
      cpu: "10m"
      ephemeral-storage:
    limits:
      memory: "50Mi"
      cpu: "50m"
      ephemeral-storage:

probes:
  shelter:
    livenessProbe:
      initialDelaySeconds: 90
      failureThreshold: 3
      periodSeconds: 10
      timeoutSeconds: 5
    readinessProbe:
      initialDelaySeconds: 0
      failureThreshold: 3
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 4
    startupProbe:
      initialDelaySeconds: 0
      failureThreshold: 30
      periodSeconds: 10
      timeoutSeconds: 1
  vault:
    livenessProbe:
      initialDelaySeconds: 90
      failureThreshold: 3
      periodSeconds: 10
      timeoutSeconds: 5
    readinessProbe:
      initialDelaySeconds: 0
      failureThreshold: 3
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 4
    startupProbe:
      initialDelaySeconds: 0
      failureThreshold: 30
      periodSeconds: 10
      timeoutSeconds: 1
  metrics:
    livenessProbe:
      initialDelaySeconds: 0
      failureThreshold: 3
      periodSeconds: 10
      timeoutSeconds: 4
    readinessProbe:
      initialDelaySeconds: 0
      failureThreshold: 3
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 4
  logshipper:
    livenessProbe:
      initialDelaySeconds: 1
      failureThreshold: 3
      periodSeconds: 10
      timeoutSeconds: 10


## DEPRECATED Liveness probe configuration, deprecation ends 30.11.2021
livenessProbe:
  logshipper:
    initialDelaySeconds: 1
    timeoutSeconds: 10
    periodSeconds: 10
    failureThreshold: 3

## tolerations, node tolerations for the pod(s)
## If KMS is deployed as a single replica, it is recommended to use the following tolerations
tolerations: []
  #- key: node.kubernetes.io/not-ready
  #  operator: Exists
  #  effect: NoExecute
  #  tolerationSeconds: 0
  #- key: node.kubernetes.io/unreachable
  #  operator: Exists
  #  effect: NoExecute
  #  tolerationSeconds: 0

## topologySpreadConstraints, specifies how to spread matching pods among the given topology
topologySpreadConstraints: []

## labels, application specific labels
labels: {}

## annotations, application specific annotations
annotations: {}

## affinity, purpose is to spread pod replicas evenly among failure domains
affinity:
  ## podAntiAffinity, possible values: soft, hard
  podAntiAffinity: "hard"

## terminationGracePeriodSeconds, time duration after process termination before
## they are forcibly killed
terminationGracePeriodSeconds: 30

## Possible values: debug, info, error
logLevel: "info"

service:
  ## The port where the KMS REST API is exposed
  ## Shelter port is not configurable (8210)
  port: 8200
  tls:
    ## Toggle TLS secured communication for the REST API
    ## Requires Service Identity Provider TLS service
    enabled: true

## Log configuration
log:
  ## Supported values ["stdout", "stream"]
  outputs: ["stdout"]
  logshipper:
    ## Possible values: debug, info, warning, error
    level: "info"

## Logshipper configuration
## Only in effect if log.outputs has 'stream'
## Requires Log Transformer service
logshipper:
  disableProbes: true
  storagePath: "/logs"
  storageAllocation: "500Mi"
  harvester:
    closeTimeout: "5m"
    logData:
    - subPaths:
      - "/kms.log*"
      logplane: "adp-app-logs"
      multiline:
        pattern: "^([[:space:]])|^$"
        negate: "false"
        match: "after"
    - subPaths:
      - "/kms-ca.log*"
      logplane: "adp-app-logs"
      multiline:
        pattern: "^[[:space:]]"
        negate: "false"
        match: "after"
    - subPaths:
      - "/kms-mon.log*"
      logplane: "adp-app-logs"
      multiline:
        pattern: "^([[:space:]])|^$"
        negate: "false"
        match: "after"
    - subPaths:
      - "/shelter.log*"
      logplane: "adp-app-logs"
      multiline:
        pattern: "^([[:space:]])|^$"
        negate: "false"
        match: "after"
    - subPaths:
      - "/metrics.log*"
      logplane: "adp-app-logs"
      multiline:
        pattern: "^([[:space:]])|^$"
        negate: "false"
        match: "after"
  logtransformer:
    host: eric-log-transformer
